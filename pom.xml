<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.github.dcrissman</groupId>
    <artifactId>cacher</artifactId>
    <version>1.0.7</version>
    <packaging>pom</packaging>

    <name>${project.artifactId}</name>

    <url>https://github.com/dcrissman/cacher</url>
    <description>Cacher provides a simple interface (Cache) that is designed to wrap a 3rd party caching client/library (eg. spymemcached). This interface is then consumed by the FetchManager which houses logic to standarize how cached values are stored and retrieved. If a value is already cached then it is simply returned, otherwise a Fetcher (either FetchSingle or FetchMultiple) is asked how to produce the value, which is then cached for subsequent requests.</description>
    <organization>
        <name>Red Hat, Inc.</name>
        <url>http://www.redhat.com/</url>
    </organization>
    <inceptionYear>2013</inceptionYear>

    <scm>
        <url>https://github.com/dcrissman/cacher</url>
        <connection>scm:git:https://github.com/dcrissman/cacher.git</connection>
        <tag>master</tag>
    </scm>

    <licenses>
        <license>
            <name>Lesser General Public License (LGPL), v 3.0</name>
            <url>http://www.gnu.org/licenses/lgpl-3.0.txt</url>
            <comments>
				In addition to the conditions of LGPLv3, you must preserve author
				attributions in source code distributions.
			</comments>
        </license>
    </licenses>

    <prerequisites>
        <maven>3.0</maven>
    </prerequisites>

    <developers>
        <developer>
            <id>dcrissman</id>
            <name>Dennis Crissman</name>
            <organization>Red Hat, Inc.</organization>
        </developer>
    </developers>

    <properties>
        <!-- Dependencies -->
        <slf4j.version>1.7.30</slf4j.version>

        <!-- Optional Dependencies (aka. 'provided' if desired) -->
        <aopalliance.version>1.0</aopalliance.version>
        <javax.inject.version>1</javax.inject.version>

        <!-- Test Dependencies -->
        <guice.version>4.2.2</guice.version>
        <junit.version>4.12</junit.version>
        <easymock.version>4.1</easymock.version>
    </properties>

    <modules>
        <module>cacher-core</module>
        <module>cacher-memcached</module>
    </modules>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.github.dcrissman</groupId>
                <artifactId>cacher-core</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <!-- The AOP features are optional, and so should be provided 
                by the implementing application if desired. -->
            <dependency>
                <groupId>aopalliance</groupId>
                <artifactId>aopalliance</artifactId>
                <version>${aopalliance.version}</version>
                <scope>provided</scope>
                <optional>true</optional>
            </dependency>

            <dependency>
                <groupId>javax.inject</groupId>
                <artifactId>javax.inject</artifactId>
                <version>${javax.inject.version}</version>
                <scope>provided</scope>
                <optional>true</optional>
            </dependency>

            <!-- Ideally Cacher should not be bound to a particular implementation 
                of javax.inject, however for the purposes of testing Guice will be used. -->
            <dependency>
                <groupId>com.google.inject</groupId>
                <artifactId>guice</artifactId>
                <version>${guice.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.easymock</groupId>
                <artifactId>easymock</artifactId>
                <version>${easymock.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <profiles>
        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-repository-plugin</artifactId>
                        <version>2.4</version>
                        <executions>
                            <execution>
                                <id>repo-bundle</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>bundle-create</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>attach-javadoc</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <additionalJOption>-Xdoclint:none</additionalJOption>
                </configuration>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <version>4.2.1</version>
                    <extensions>true</extensions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>